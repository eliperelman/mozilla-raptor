#!/usr/bin/env node

var parser = require('nomnom');
var raptor = require('..');
var utils = require('../utils');
var path = require('path');

var namedTests = [
  '    coldlaunch\t\tcold-launch lifecycle of an application from appLaunch to fullyLoaded',
  '    reboot\t\tdevice reboot lifecycle from device power on until System/Homescreen fullyLoaded',
  '    restart-b2g\t\trestart B2G lifecycle from B2G start until System/Homescreen fullyLoaded'
].join('\n');

var parent = parser
  .script('raptor')
  .option('version', {
    flag: true,
    abbr: 'v',
    help: 'outputs the raptor cli tool version',
    callback: function() {
      return require('../package.json').version;
    }
  })
  .option('config', {
    metavar: '<path>',
    help: 'specify additional Orangutan device configuration JSON. Environment: RAPTOR_CONFIG',
    default: '',
    transform: utils.compose(utils.toAbsolute, utils.fromEnvironment('RAPTOR_CONFIG'))
  })
  .option('serial', {
    metavar: '<serial>',
    help: 'target a specific device for testing. Environment: ANDROID_SERIAL',
    default: '',
    transform: utils.fromEnvironment('ANDROID_SERIAL')
  })
  .option('adbHost', {
    full: 'adb-host',
    metavar: '<host>',
    help: 'connect to a device on a remote host. tip: use with --adb-port. Envrionment: ADB_HOST',
    default: '',
    transform: utils.fromEnvironment('ADB_HOST')
  })
  .option('adbPort', {
    full: 'adb-port',
    metavar: '<port>',
    help: 'port for connecting to a device on a remote host. use with --adb-host. Environment: ADB_PORT',
    default: '',
    transform: utils.compose(utils.toInt, utils.fromEnvironment('ADB_PORT')),
    callback: utils.validate('adbPort', utils.validator.isInt)
  })
  .option('marionetteHost', {
    full: 'marionette-host',
    metavar: '<host>',
    help: 'connect to marionette on a remote host. tip: use with --marionette-port. Envrionment: MARIONETTE_HOST',
    default: 'localhost',
    transform: utils.fromEnvironment('MARIONETTE_HOST')
  })
  .option('marionettePort', {
    full: 'marionette-port',
    metavar: '<port>',
    help: 'port for connecting to marionette on a remote host. tip: use with --marionette-host. Environment: MARIONETTE_PORT',
    default: 2828,
    transform: utils.compose(utils.toInt, utils.fromEnvironment('MARIONETTE_PORT')),
    callback: utils.validate('marionettePort', utils.validator.isInt)
  })
  .option('host', {
    metavar: '<host>',
    help: 'host for reporting metrics to InfluxDB database. Environment: RAPTOR_HOST',
    default: 'localhost',
    transform: utils.fromEnvironment('RAPTOR_HOST')
  })
  .option('port', {
    metavar: '<port>',
    help: 'port for reporting metrics to InfluxDB database. Environment: RAPTOR_PORT',
    default: 8086,
    transform: utils.compose(utils.toInt, utils.fromEnvironment('RAPTOR_PORT')),
    callback: utils.validate('port', utils.validator.isInt)
  })
  .option('username', {
    metavar: '<username>',
    help: 'username for reporting metrics to InfluxDB database. Environment: RAPTOR_USERNAME',
    default: 'root',
    transform: utils.fromEnvironment('RAPTOR_USERNAME')
  })
  .option('password', {
    metavar: '<password>',
    help: 'password for reporting metrics to InfluxDB database. Environment: RAPTOR_PASSWORD',
    default: 'root',
    transform: utils.fromEnvironment('RAPTOR_PASSWORD')
  })
  .option('database', {
    metavar: '<database>',
    help: 'name of InfluxDB database for reporting metrics. Environment: RAPTOR_DATABASE',
    default: '',
    transform: utils.fromEnvironment('RAPTOR_DATABASE')
  })
  .option('log', {
    metavar: '<path>',
    help: 'path to store historical test metrics. Environment: RAPTOR_LOG',
    default: path.join(process.cwd(), 'raptor.log'),
    transform: utils.compose(utils.toAbsolute, utils.fromEnvironment('RAPTOR_LOG'))
  })
  .option('output', {
    metavar: '<mode>',
    help: 'output mode: normal or quiet. Environment: RAPTOR_OUTPUT',
    default: 'normal',
    transform: utils.fromEnvironment('RAPTOR_OUTPUT')
  });

parent
  .command('test')
  .help('Run a performance test by name or path location.')
  .option('nameOrPath', {
    metavar: '<nameOrPath>',
    position: 1,
    help: 'named test or path to a particular test to run. Named tests:\n' + namedTests + '\n',
    required: true,
    transform: utils.findTest
  })
  .option('runs', {
    metavar: '<runs>',
    help: 'number of times to run the test and aggregate results',
    default: 1,
    transform: utils.toInt,
    callback: utils.validate('runs', utils.validator.isInt)
  })
  .option('app', {
    metavar: '<appOrigin>',
    help: 'specify the origin or gaiamobile.org prefix of an application to test',
    transform: utils.toFQDN
  })
  .option('entryPoint', {
    metavar: '<entryPoint>',
    full: 'entry-point',
    help: 'specify an application entry point other than the default'
  })
  .option('timeout', {
    metavar: '<milliseconds>',
    help: 'time to wait between runs for success to occur',
    default: 60000,
    transform: utils.toInt,
    callback: utils.validate('timeout', utils.validator.isInt)
  })
  .option('retries', {
    metavar: '<times>',
    help: 'times to retry test or run if failure or timeout occurs',
    default: 1,
    transform: utils.toInt,
    callback: utils.validate('retries', utils.validator.isInt)
  })
  .option('launchDelay', {
    metavar: '<milliseconds>',
    help: 'time to wait between subsequent application launches',
    default: 10000,
    transform: utils.toInt,
    callback: utils.validate('launchDelay', utils.validator.isInt)
  })
  .option('memoryDelay', {
    metavar: '<milliseconds>',
    help: 'time to wait before capturing memory after application fully loaded',
    default: 0,
    transform: utils.toInt,
    callback: utils.validate('memoryDelay', utils.validator.isInt)
  })
  .option('time', {
    metavar: '<epochMilliseconds>',
    help: 'override the start time and unique identifier for test runs',
    default: Date.now(),
    transform: utils.toInt,
    callback: utils.validate('time', utils.validator.isInt)
  })
  .callback(function(options) {
    raptor(options);
  });

parent
  .command('submit')
  .help('Submit a Raptor JSON log to an InfluxDB database')
  .callback(function(options) {
    raptor
      .report(options)
      .then(function() {
        if (options.output === 'quiet') {
          return;
        }

        console
          .log('[Raptor: Database Submission] Success for: %s', options.log);
      });
  });

parser.parse();
